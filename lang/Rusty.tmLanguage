<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>
		Copyright (C) 2014 Peter Varo
		&lt;http://github.com/petervaro/rust&gt;

		This program is free software: you can redistribute it
		and/or modify it under the terms of the GNU General
		Public License as published by the Free Software
		Foundation, either version 3 of the License, or (at your
		option) any later version.

		This program is distributed in the hope that it will be
		useful, but WITHOUT ANY WARRANTY; without even the
		implied warranty of MERCHANTABILITY or FITNESS FOR A
		PARTICULAR PURPOSE. See the GNU General Public License
		for more details.

		You should have received a copy of the GNU General Public
		License along with this program, most likely a file in
		the root directory, called "LICENSE". If not, see
		&lt;http://www.gnu.org/licenses&gt;.
	</string>
	<key>name</key>
	<string>Rusty</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#line_comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#block_comments</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b0b[01_]+((i|u)(8|16|32|64)?)?</string>
			<key>name</key>
			<string>constant.numeric.integer.binary.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b0o[0-7_]+((i|u)(8|16|32|64)?)?</string>
			<key>name</key>
			<string>constant.numeric.integer.octal.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b0x[\h_]+((i|u)(8|16|32|64)?)?</string>
			<key>name</key>
			<string>constant.numeric.integer.hexadecimal.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b\d[\d_]*(\.\d[\d_]*)?([eE][+-]?\d[\d_]*)?(f(32|64))?(?=\W|$)</string>
			<key>name</key>
			<string>constant.numeric.float.decimal.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(?&lt;!\.)\d[\d_]*((i|u)(8|16|32|64)?)?</string>
			<key>name</key>
			<string>constant.numeric.integer.decimal.rs</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strong_constants</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#weak_constants</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(typedef|extern|static|_Thread_local|auto|register)\b</string>
			<key>name</key>
			<string>keyword.storage.class_specifiers.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(const|static)\b</string>
			<key>name</key>
			<string>keyword.type.type_qualifiers.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(let|move|pub|type)\b</string>
			<key>name</key>
			<string>keyword.other.declaration.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(extern|use|where)\b</string>
			<key>name</key>
			<string>keyword.other.access.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(box|mut)\b</string>
			<key>name</key>
			<string>keyword.type.pointer.cast.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(as)\b</string>
			<key>name</key>
			<string>keyword.type.cast.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(ref)\b</string>
			<key>name</key>
			<string>keyword.type.borrow.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(crate|fn|impl|mod|proc|unsafe)\b</string>
			<key>name</key>
			<string>keyword.storage.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(once)\b</string>
			<key>name</key>
			<string>keyword.other.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(break|continue|return)\b</string>
			<key>name</key>
			<string>keyword.control.flow_control.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(for|in|loop|while)\b</string>
			<key>name</key>
			<string>keyword.control.iteration_statements.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(if|else|match)\b</string>
			<key>name</key>
			<string>keyword.control.branching.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(abstract|be|do|final|override|priv|pure|unsized|virtual|yield|(align|offset|size|type)of)\b</string>
			<key>name</key>
			<string>invalid.illegal.reserved_keyword.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(\+|-|\*|/|%|&amp;|\^|\||&lt;&lt;|&gt;&gt;)=</string>
			<key>name</key>
			<string>keyword.operator.assignment.augmented.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(&lt;|&gt;)=?|(=|!)=</string>
			<key>name</key>
			<string>keyword.operator.comparison.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>&amp;&amp;|\|\||!</string>
			<key>name</key>
			<string>keyword.operator.bool.logical.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\+|-|\*|/|%|&amp;|\^|\||~|&lt;&lt;|&gt;&gt;|</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.rs</string>
		</dict>
		<dict>
			<key>match</key>
			<string>=|\.|::?|(-|=)&gt;</string>
			<key>name</key>
			<string>keyword.operator.value_and_annotation_assignment.rs</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin_functions</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin_macros</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#builtin_types</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#language_variables</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>([a-zA-Z_]\w*)\s*(&lt;.+&gt;)?\s*\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.name.rs</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.function_call.rs</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(macro_rules)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.section.macro.rs</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.macro_invocation.rs</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(!)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.macro.rs</string>
						</dict>
					</dict>
					<key>end</key>
					<string>;</string>
					<key>name</key>
					<string>meta.macro_invocation.rs</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>end</key>
							<string>\)</string>
							<key>name</key>
							<string>meta.macro_invocation.rs</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.variable.macro.rs</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.specifier.macro.rs</string>
										</dict>
										<key>3</key>
										<dict>
											<key>name</key>
											<string>support.type.macro.rs</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(\$)[a-zA-Z_]\w*\s*(:)\s*(item|block|stmt|pat|expr|ty|ident|path|matchers|tt)</string>
									<key>name</key>
									<string>variable.parameter.macro.rs</string>
								</dict>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.operator.variable.macro.rs</string>
										</dict>
									</dict>
									<key>match</key>
									<string>(\$)[a-zA-Z_]\w*</string>
									<key>name</key>
									<string>variable.parameter.macro.rs</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>=&gt;</string>
							<key>name</key>
							<string>keyword.operator.arrow.macro.rs</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#string_quoted</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>block_comments</key>
		<dict>
			<key>begin</key>
			<string>/\*</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.slash_star.rs</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#block_comments</string>
				</dict>
			</array>
		</dict>
		<key>builtin_functions</key>
		<dict>
			<key>match</key>
			<string>\b(from_str|drop|range|repeat|(sync_)?channel|spawn)\b</string>
			<key>name</key>
			<string>support.function.builtin.rs</string>
		</dict>
		<key>builtin_macros</key>
		<dict>
			<key>match</key>
			<string>\b(assert|assert_eq|bitflags|bytes|cfg|col|concat|concat_idents|debug_assert|debug_assert_eq|env|file|format|format_args|include_bin|include_str|line|local_data_key|module_path|option_env|panic|print|println|select|stringify|try|unimplemented|unreachable|vec|write|writeln)!</string>
			<key>name</key>
			<string>support.macro.builtin.rs</string>
		</dict>
		<key>builtin_types</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(bool|(u|i)(8|16|32|64)|f(32|64)|u?int|((char|str)(?!::)))\b</string>
					<key>name</key>
					<string>support.type.rs</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(enum|struct|trait)\b</string>
					<key>name</key>
					<string>support.type.member.rs</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Ascii|Box|(Posix|Windows)?Path|String|Vec|(Sync)?Sender|Receiver)\b</string>
					<key>name</key>
					<string>support.class.structs.rs</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Ordering|Option|Result)\b</string>
					<key>name</key>
					<string>entity.name.type.enums.rs</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Copy|Send|Sized|Sync|Add|Sub|Mul|Div|Rem|Neg|Not|Bit(And|Or|Xor)|Drop|Deref(Mut)?|Shl|Shr|Index(Mut)?|Slice(Mut)?|Fn(Mut|Once)?|(Owned)?AsciiCast|AsciiStr|Into(Bytes|Str)|ToCStr|(Unicode)?Char|Clone|Partial(Eq|Ord)|Ord(ering)?|Eq(uiv)?|Extend|ExactSize|(From|RandomAccess|Cloneable|Ord|(Mutable)?DoubleEnded)?Iterator|Num(Cast)?|Checked(Add|Sub|Mul|Div)|(Uns|S)igned|Int|Float(Math)?|(To|From)?Primitive|GenericPath|Raw(Mut)?Ptr|(Buff|Writ|Read)er|Seek|Str(Vector|Prelude|Allocating)?|IntoMaybeOwned|UnicodeStrPrelude|ToString|Tuple(1(0|1|2)?|2|3|4|5|6|7|8|9)|AsSlice|(Clone)?SlicePrelude|VectorVector|PartialEqSlicePrelude|CloneSliceAllocPrelude|OrdSlice(Alloc)?Prelude|SliceAllocPrelude)\b</string>
					<key>name</key>
					<string>storage.modifier.traits.rs</string>
				</dict>
			</array>
		</dict>
		<key>compiler_magic</key>
		<dict>
			<key>match</key>
			<string>#\[(doc|path)\s*=\s*\]</string>
			<key>name</key>
			<string>.rs</string>
		</dict>
		<key>entity_name_class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#illegal_names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#generic_names</string>
				</dict>
			</array>
		</dict>
		<key>generic_names</key>
		<dict>
			<key>match</key>
			<string>[a-zA-Z_]\w*</string>
		</dict>
		<key>illegal_names</key>
		<dict>
			<key>match</key>
			<string>\b(abstract|as|be|box|break|const|continue|crate|do|else|enum|extern|false|final|fn|for|if|impl|in|let|loop|match|mod|move|mut|once|override|priv|proc|pub|pure|ref|return|static|self|struct|super|true|trait|type|unsafe|unsized|use|virtual|where|while|yield|(align|offset|size|type)of)\b</string>
			<key>name</key>
			<string>invalid.illegal_names.name.rs</string>
		</dict>
		<key>language_variables</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)\b(self|super)\b</string>
			<key>name</key>
			<string>variable.language.rs</string>
		</dict>
		<key>line_comments</key>
		<dict>
			<key>match</key>
			<string>//.*$\n?</string>
			<key>name</key>
			<string>comment.line.double_slash.rs</string>
		</dict>
		<key>string_quoted</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.bytes.prefix.rs</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.escaped.special.rs</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(b)'(\\('|\\|n|r|t|0|x\h{2}|u\h{4}|U\h{8}))'</string>
					<key>name</key>
					<string>string.quoted.single.bytes.escaped.rs</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.bytes.prefix.rs</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.bytes.quoted.single.rs</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(b)'(\\|'|\p{^ASCII}|\n)'</string>
					<key>name</key>
					<string>string.quoted.single.bytes.illegal.rs</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.prefix.rs</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.bytes.quoted.single.rs</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(b)'\p{ASCII}(.*?)'</string>
					<key>name</key>
					<string>string.quoted.single.bytes.regular.rs</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.escaped.special.rs</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\w)'(\\('|\\|n|r|t|0|x\h{2}|u\h{4}|U\h{8}))'</string>
					<key>name</key>
					<string>string.quoted.single.escaped.rs</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.string.quoted.single.rs</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\w)'(\\|'|\n)'</string>
					<key>name</key>
					<string>string.quoted.single.illegal.rs</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.string.quoted.more.rs</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\w)'.(.*?)'</string>
					<key>name</key>
					<string>string.quoted.single.regular.rs</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(r(#*))"</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.prefix.rs</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"(\2)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.string.suffix.rs</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.raw.rs</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.regular.rs</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\\("|\n|\\|n|r|t|0|x\h{2}|u\h{4}|U\h{8})</string>
							<key>name</key>
							<string>constant.character.escaped.special.rs</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(br(#*))"</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.bytes.prefix.rs</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"(\2)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.bytes.suffix.rs</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.bytes.raw.rs</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\p{^ASCII}</string>
							<key>name</key>
							<string>invalid.illegal.bytes.quoted.rs</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(b)"</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.bytes.prefix.rs</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>name</key>
					<string>string.quoted.double.bytes.regular.rs</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\p{^ASCII}</string>
							<key>name</key>
							<string>invalid.illegal.bytes.quoted.rs</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\("|\n|\\|n|r|t|0|x\h{2}|u\h{4}|U\h{8})</string>
							<key>name</key>
							<string>constant.character.escaped.special.rs</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>strong_constants</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\w|!|&gt;)\(\)</string>
					<key>name</key>
					<string>constant.language.unit.rs</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(false|true)\b</string>
					<key>name</key>
					<string>constant.language.word_like.rs</string>
				</dict>
			</array>
		</dict>
		<key>weak_constants</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(Some|None|Ok|Err|Less|Equal|Greater)\b</string>
					<key>name</key>
					<string>constant.other.enum_values.rs</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.rs</string>
	<key>uuid</key>
	<string>4DE8A258-3469-48CE-BDB8-52624D0FF2D1</string>
</dict>
</plist>
